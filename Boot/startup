local StartScreen = paintutils.loadImage(".OSRunner/Resources/logo")
local W, H = term.getSize()
local nfs = {}
for i,v in pairs(fs) do
	nfs[i] = v
end 

local ShouldExist = {
".OSRunner/Keep";
".OSRunner/Kernels";
}

local function CenterPrint(Text, Line)
	term.setCursorPos((W-#Text)/2, Line)
	print(Text)
end 

local function CenterWrite(Text, Line)
	term.setCursorPos((W-#Text)/2, Line)
	write(Text)
end 

local function EraseData()
	if nfs.exists(".OSRunner/Kernels") then
		nfs.delete(".OSRunner/Kernels")
	end 
end 

local function Setup()
	EraseData()
	nfs.makeDir(".OSRunner/Kernels")
	nfs.makeDir(".OSRunner/Keep")
	nfs.makeDir(".OSRunner/Kernels/CraftOS")
end 

local function Sand(Dir, OSName, SetupFile, SetupURL)
	os.run({},".OSRunner/APIs/osrunner")
	sandbox.load(Dir, OSName, SetupFile, SetupURL)
end 

local function makeCustom()
	local oldPull=os.pullEvent
	os.pullEvent=os.pullEventRaw
	term.setBackgroundColor(colors.white)
	term.setTextColor(colors.gray)
	term.clear()
	term.setCursorPos(1,1)
	print("What is your OS called?")
	local cOSname=read()
	if fs.exists(".OSRunner/OSList/"..cOSname) then printError("OS Name taken! D:") sleep(1) os.pullEvent=oldPull return false end
	print("What is the pastebin ID for the installer?")
	local pID=read()
	local url="http://pastebin.com/raw.php?i="..textutils.urlEncode(pID)
	if not http.get(url) then printError("Invalid Pastebin ID! D:") sleep(1) os.pullEvent=oldPull return false end
	print("All set! Making OS Entry...")
	local cDir=".OSRunner/Kernels/"..cOSname
	local stF="setup"
	local makeOS=fs.open(".OSRunner/OSList/"..cOSname,"w")
	makeOS.writeLine(cDir)
	makeOS.writeLine(cOSname)
	makeOS.writeLine(stF)
	makeOS.writeLine(url)
	makeOS.close()
	local makePerms=fs.open(".OSRunner/OSPerms/"..cOSname,"w")
	makePerms.write(textutils.serialize({top=false,bottom=false,front=false,back=false,left=false,right=false}))
	makePerms.close() 
	print("Made OS!")
	sleep(1)
	os.pullEvent=oldPull
	return true
end

local function managePeripherals(OS)
	local OSPD=".OSRunner/OSPerms/"..OS
	if not fs.exists(OSPD) then
		local writeFirst=fs.open(OSPD,"w")
		writeFirst.write(textutils.serialize({top=false,bottom=false,front=false,back=false,left=false,right=false}))
		writeFirst.close()
	end
	local readConfig=fs.open(OSPD,"r")
	local Perms=textutils.unserialize(readConfig.readAll())
	readConfig.close()
	while true do
		local drawBox=paintutils.loadImage(".OSRunner/Resources/box")
		term.setBackgroundColor(colors.white) 
		term.clear()
		paintutils.drawImage(drawBox,1,1)
		term.setTextColor(colors.white)
		term.setBackgroundColor(colors.red)
		CenterPrint("Peripheral Management:",1)
		term.setBackgroundColor(colors.gray)
		CenterPrint(OS,2)
		for k,v in pairs(rs.getSides()) do
			term.setBackgroundColor(colors.white)
			term.setTextColor(colors.black)
			term.setCursorPos(14,3+(k*2))
			write(v..": ")
			write(tostring(Perms[v]))
			write(" "..(peripheral.getType(v) or "none"))
			if not Perms[v] then 
				term.setBackgroundColor(colors.lime) term.setTextColor(colors.white) CenterPrint("Allow Access",4+(k*2))
			else
				term.setBackgroundColor(colors.red) term.setTextColor(colors.black) CenterPrint("Deny Access", 4+(k*2))
			end
		end
		term.setCursorPos(5,18)
		term.setBackgroundColor(colors.lightGray)
		term.setTextColor(colors.black)
		write("Apply")
		term.setCursorPos(42,18)
		write("Exit")
		local e,b,xPos,yPos=os.pullEventRaw()
		if e=="mouse_click" then
			if (yPos==6) then
				Perms["top"] = not Perms["top"]
			elseif yPos==8 then
				Perms["bottom"]= not Perms["bottom"]
			elseif yPos==10 then
				Perms["front"]= not Perms["front"]
			elseif yPos==12 then
				Perms["back"]= not Perms["back"]
			elseif yPos==14 then
				Perms["left"]= not Perms["left"]
			elseif yPos==16 then
				Perms["right"]= not Perms["right"]
			elseif (xPos>=5 and xPos<=10 and yPos==18) then
				local writeConfig=fs.open(OSPD,"w")
				writeConfig.write(textutils.serialize(Perms))
				writeConfig.close()
				local readConfig=fs.open(OSPD,"r")
				local Perms=textutils.unserialize(readConfig.readAll())
				readConfig.close()
			elseif (xPos>=42 and xPos<=46 and yPos==18) then
				return
			end
		end
	end
end


if not fs.exists(".OSRunner/osConfig") then local makeConf=fs.open(".OSRunner/osConfig","w") makeConf.writeLine(os.version()) makeConf.close() end

shell.run(".OSRunner/APIs/osrunner")

term.setBackgroundColor(colors.lime)
term.clear()
paintutils.drawImage(StartScreen, 8, 4)

term.setCursorPos(1, H-1)
term.setBackgroundColor(colors.lime)
term.setTextColor(colors.gray)
local handle = fs.open("/.OSRunner/osConfig","r")
defaultOS = handle.readLine()
handle.close()
CenterPrint("Running Default OS: "..defaultOS,H-1)
CenterWrite("Press F5 for OSRunner Menu",H)




local function CheckFiles()

end 

local function StartLoader()
	local currentOS=1
	local OSList=nfs.list(".OSRunner/OSList/")
	table.sort(OSList)
	local handle = fs.open("/.OSRunner/osConfig","r")
	local defaultOS = handle.readLine()
	handle.close()
	while true do
		local handle = fs.open("/.OSRunner/osConfig","r")
		defaultOS = handle.readLine()
		handle.close()
		local Main = paintutils.loadImage(".OSRunner/Resources/main")
		term.setBackgroundColor(colors.white)
		term.clear()
		paintutils.drawImage(Main, 1, 1)
		term.setBackgroundColor(colors.red)
		term.setTextColor(colors.white)
		CenterPrint("OSRunner Options", 1)
		term.setBackgroundColor(colors.lightGray)
		term.setTextColor(colors.black)
		term.setCursorPos(4, 12)
		if currentOS==1 then term.setTextColor(colors.gray) end
		write("Back")
		if currentOS==1 then term.setTextColor(colors.black) end
		term.setCursorPos(45, 12)
		if currentOS==#OSList then term.setTextColor(colors.gray) end
		write("Next")
		if currentOS==#OSList then term.setTextColor(colors.black) end
		term.setCursorPos(4, 15)
		if not fs.exists(".OSRunner/Kernels/"..OSList[currentOS]) then term.setTextColor(colors.gray) end
		write("Delete OS")
		if not fs.exists(".OSRunner/Kernels/"..OSList[currentOS]) then term.setTextColor(colors.black) end
		term.setCursorPos(2, 17)
		write("System Settings")
		term.setCursorPos(22, 16)
		write("Launch OS")
		term.setCursorPos(40,15)
		if currentOS==1 then term.setTextColor(colors.gray) end
		write("First")
		if currentOS==1 then term.setTextColor(colors.black) end
		term.setCursorPos(40,17)
		if currentOS==#OSList then term.setTextColor(colors.gray) end
		write("Last")
		if currentOS==#OSList then term.setTextColor(colors.black) end
		term.setBackgroundColor(colors.lightGray)
		term.setCursorPos(2, 3)
		term.write(string.rep(" ", W - 2))
		local v=OSList[currentOS]
		CenterPrint(v, 3)
		term.setCursorPos(2,19)
		term.setBackgroundColor(colors.gray)
		term.setTextColor(colors.white)
		CenterWrite("Default OS: "..defaultOS,H)
		local event,btw,x,y=os.pullEventRaw("mouse_click")
		if event=="mouse_click" then
			if x >= 4 and x <= 7 and y==12 and currentOS > 1 then
				currentOS=currentOS-1
			elseif x >= 45 and x <= 48 and y==12 and currentOS < #OSList then
				currentOS=currentOS+1
			elseif x >= 4 and x <= 12 and y==15 and fs.exists(".OSRunner/Kernels/"..OSList[currentOS]) then
				fs.delete(".OSRunner/Kernels/"..OSList[currentOS])
				term.setTextColor(colors.black)
				CenterPrint("Deleted "..OSList[currentOS],5)
				sleep(1)
			elseif x >= 2 and x <= 17 and y==17 then
				while true do
					term.clear()
					local gui = paintutils.loadImage("/.OSRunner/Resources/setscreen")
					paintutils.drawImage(gui,1,1)
					term.setBackgroundColor(colors.red)
					term.setTextColor(colors.white)
					CenterPrint("System Settings",1)
					term.setBackgroundColor(colors.lightGray)
					term.setTextColor(colors.black)
					CenterPrint(OSList[currentOS],3)
					term.setCursorPos(3,5)
					local handle = fs.open("/.OSRunner/osConfig","r")
					defaultOS = handle.readLine()
					handle.close()
					if defaultOS == OSList[currentOS] then
						term.setBackgroundColor(colors.lime)
					else
						term.setBackgroundColor(colors.red)
					end
					term.write("Default OS")
					term.setCursorPos(30,5)
					term.setBackgroundColor(colors.lime)
					term.write("Manage Peripherals")
					term.setBackgroundColor(colors.lightGray)
					term.setTextColor(colors.black)
					term.setCursorPos(4, 12)
					if currentOS==1 then term.setTextColor(colors.gray) end
					write("Back")
					if currentOS==1 then term.setTextColor(colors.black) end
					term.setCursorPos(45, 12)
					if currentOS==#OSList then term.setTextColor(colors.gray) end
					write("Next")
					if currentOS==#OSList then term.setTextColor(colors.black) end
					term.setCursorPos(2,15)
					write("   Custom OS   ")
					term.setCursorPos(35,15)
					write("  Main Screen  ")
					term.setCursorPos(14,17)
					write("  Reinstall OSRunner  ")
					local handle = fs.open("/.OSRunner/osConfig","r")
					defaultOS = handle.readLine()
					handle.close()
					local _,p1,xPos,yPos = os.pullEventRaw("mouse_click")
					if event=="mouse_click" and p1 == 1 then
						if (xPos >=3 and xPos <=12 and yPos == 5) then
							if defaultOS == OSList[currentOS] then
								term.setCursorPos(3,5)
								term.setBackgroundColor(colors.red)
								term.write("Default OS")
								local handle = fs.open("/.OSRunner/osConfig","w")
								handle.write(os.version())
								handle.close()
							elseif defaultOS ~= OSList[currentOS] then
								term.setCursorPos(3,5)
								term.setBackgroundColor(colors.lime)
								term.write("Default OS")
								local handle = fs.open("/.OSRunner/osConfig","w")
								handle.writeLine(OSList[currentOS])
								handle.close()
							end
						elseif (xPos >= 2 and xPos <=8 and yPos == 12) and OSList[currentOS-1] ~= nil then
							currentOS = (currentOS-1)
						elseif (xPos >= 43 and xPos <= 50 and yPos ==12) and #OSList >= currentOS+1 then
							currentOS = (currentOS+1)
						elseif (xPos >=35 and xPos <=50 and yPos ==15) then
							return StartLoader()
						elseif (xPos >= 30 and xPos <= 48 and yPos == 5) then
							managePeripherals(OSList[currentOS])
						elseif (xPos >= 5 and xPos <= 13 and yPos == 15) then
							makeCustom()
							local OSList=nfs.list(".OSRunner/OSList/")
							table.sort(OSList)
						elseif (xPos >= 14 and xPos <= 36 and yPos==17) then
							term.setBackgroundColor(colors.white)
							term.clear()
							term.setCursorPos(1,1)
							local ynM=paintutils.loadImage(".OSRunner/Resources/box")
							paintutils.drawImage(ynM, 1, 1)
							term.setBackgroundColor(colors.white)
							CenterPrint("Are you sure you want to reinstall OSRunner?",5)
							CenterPrint("All OS'es will be kept.",7)
							term.setBackgroundColor(colors.lime)
							term.setCursorPos(7,11)
							write(" Yes ")
							term.setBackgroundColor(colors.red)
							term.setCursorPos(40,11)
							write(" No ")
							while true do
								local e,btn,x,y=os.pullEventRaw("mouse_click")
								if (x>=7 and x<=12 and y==11) then
									term.setBackgroundColor(colors.white)
									CenterPrint("Reinstalling...",12)
									fs.delete(".tempOS")
									fs.delete(".tempKN")
									fs.makeDir(".tempOS")
									fs.makeDir(".tempKN")
									for k,v in pairs(fs.list(".OSRunner/OSList")) do
										fs.copy(".OSRunner/OSList/"..v, ".tempOS/"..v)
									end
									os.queueEvent("") coroutine.yield()
									for k,v in pairs(fs.list(".OSRunner/Kernels")) do
										fs.copy(".OSRunner/Kernels/"..v, ".tempKN/"..v)
									end
									os.queueEvent("") coroutine.yield()
									local cake=http.get("https://raw.github.com/MudkipTheEpic/ComputerCraft/master/installer").readAll()
									os.queueEvent("") coroutine.yield()
									pcall(setfenv(loadstring(cake),getfenv()))
									os.queueEvent("") coroutine.yield()
									for k,v in pairs(fs.list(".tempOS")) do
										if not fs.exists(".OSRunner/OSList/"..v) then fs.copy(".tempOS/"..v,".OSRunner/OSList/"..v) end
									end
									os.queueEvent("") coroutine.yield()
									for k,v in pairs(fs.list(".tempKN")) do
										fs.delete(".OSRunner/Kernels/"..v) fs.copy(".tempKN/"..v,".OSRunner/Kernels/"..v)
									end
									os.queueEvent("") coroutine.yield()
									fs.delete(".tempOS")
									fs.delete(".tempKN")
									os.reboot()
								elseif (x>=40 and x<=44 and y==11) then 
									return StartLoader()
								end
							end
						end	
					end
				end
			elseif x >= 22 and x <= 30 and y==16 then
				local readConf=fs.open(".OSRunner/OSList/"..OSList[currentOS],"r")
				local dir=readConf.readLine()
				local OSName=readConf.readLine()
				local setupFile=readConf.readLine()
				local setupURL=readConf.readLine()
				readConf.close()
				if not fs.exists(".OSRunner/Kernels/"..OSList[currentOS]) then
					Sand(dir,OSName,setupFile,setupURL)
				else
					Sand(dir,OSName)
				end
				break
			elseif x >= 40 and x <= 44 and y==15 and currentOS > 1 then
				currentOS=1
			elseif x >= 40 and x <= 43 and y==17 and currentOS < #OSList then
				currentOS=#OSList
			end
		end
	end 
end

local function RunDef()
	local ShouldSet = false
	for i,v in pairs(ShouldExist) do
		if not nfs.exists(v) then
			ShouldSet = true
		end 
	end 
	if ShouldSet == true then
		Setup()
	end 
	term.setBackgroundColor(colors.lime)
	term.clear()
	local handle = fs.open("/.OSRunner/osConfig","r")
	defaultOS = handle.readLine()
	handle.close()
	if fs.exists(".OSRunner/Kernels/"..defaultOS) or defaultOS==os.version() then
		Sand(".OSRunner/Kernels/"..defaultOS, defaultOS)
	else
		local readConf=fs.open(".OSRunner/OSList/"..defaultOS,"r")
		local dir=readConf.readLine()
		local OSName=readConf.readLine()
		local setupFile=readConf.readLine()
		local setupURL=readConf.readLine()
		readConf.close()
		Sand(dir,OSName,setupFile,setupURL)
	end 
end

os.startTimer(3)
while true do
	local event, p1, p2 = os.pullEventRaw()
	if event == "key" and p1 == 63 then
		StartLoader()
		break
	elseif event == "timer" then
		RunDef()
		break
	end 
end