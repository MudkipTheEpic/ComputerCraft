local debug=true
if debug then print("Initiating load") sleep(2) end
local StartScreen = paintutils.loadImage(".OSRunner/Resources/logo")
local W, H = term.getSize()
local nfs = {}
for i,v in pairs(fs) do
	nfs[i] = v
end 

local ShouldExist = {
".OSRunner/Keep";
".OSRunner/Kernels";
}



local function CenterPrint(Text, Line)
	term.setCursorPos((W-#Text)/2, Line)
	term.write(Text.."\n")
end 

local function CenterWrite(Text, Line)
	term.setCursorPos((W-#Text)/2, Line)
	term.write(Text)
end 

local function EraseData()
	if nfs.exists(".OSRunner/Kernels") then
		nfs.delete(".OSRunner/Kernels")
	end 
end 

--Credit GravityScore
local function modRead(properties)
	local w, h = term.getSize()
	local defaults = {replaceChar = nil, history = nil, visibleLength = nil, textLength = nil,
	liveUpdates = nil, exitOnKey = nil}
	if not properties then properties = {} end
	for k, v in pairs(defaults) do if not properties[k] then properties[k] = v end end
	if properties.replaceChar then properties.replaceChar = properties.replaceChar:sub(1, 1) end
	if not properties.visibleLength then properties.visibleLength = w end

	local sx, sy = term.getCursorPos()
	local line = ""
	local pos = 0
	local historyPos = nil

	local function redraw(repl)
		local scroll = 0
		if properties.visibleLength and sx + pos > properties.visibleLength + 1 then
			scroll = (sx + pos) - (properties.visibleLength + 1)
		end

		term.setCursorPos(sx, sy)
		local a = repl or properties.replaceChar
		if a then term.write(string.rep(a, line:len() - scroll))
			else term.write(line:sub(scroll + 1, -1)) end
			term.setCursorPos(sx + pos - scroll, sy)
		end

		local function sendLiveUpdates(event, ...)
		if type(properties.liveUpdates) == "function" then
			local ox, oy = term.getCursorPos()
			properties.liveUpdates(line, event, ...)
			if a == true and data == nil then
				term.setCursorBlink(false)
				return line
			elseif a == true and data ~= nil then
				term.setCursorBlink(false)
				return data
			end
			term.setCursorPos(ox, oy)
		end
	end

	term.setCursorBlink(true)
	while true do
		local e, but, x, y, p4, p5 = os.pullEvent()

		if e == "char" then
			local s = false
			if properties.textLength and line:len() < properties.textLength then s = true
				elseif not properties.textLength then s = true end

				local canType = true
				if not properties.grantPrint and properties.refusePrint then
					local canTypeKeys = {}
					if type(properties.refusePrint) == "table" then
						for _, v in pairs(properties.refusePrint) do
							table.insert(canTypeKeys, tostring(v):sub(1, 1))
						end
					elseif type(properties.refusePrint) == "string" then
						for char in properties.refusePrint:gmatch(".") do
							table.insert(canTypeKeys, char)
						end
					end
					for _, v in pairs(canTypeKeys) do if but == v then canType = false end end
				elseif properties.grantPrint then
					canType = false
					local canTypeKeys = {}
					if type(properties.grantPrint) == "table" then
						for _, v in pairs(properties.grantPrint) do
							table.insert(canTypeKeys, tostring(v):sub(1, 1))
						end
					elseif type(properties.grantPrint) == "string" then
						for char in properties.grantPrint:gmatch(".") do
							table.insert(canTypeKeys, char)
						end
					end
					for _, v in pairs(canTypeKeys) do if but == v then canType = true end end
				end

				if s and canType then
					line = line:sub(1, pos) .. but .. line:sub(pos + 1, -1)
					pos = pos + 1
					redraw()
				end
			elseif e == "key" then
				if but == keys.enter then
					break
				elseif but == keys.left then
					if pos > 0 then pos = pos - 1 redraw() end
				elseif but == keys.right then
					if pos < line:len() then pos = pos + 1 redraw() end
				elseif (but == keys.up or but == keys.down) and properties.history then
					redraw(" ")
					if but == keys.up then
						if historyPos == nil and #properties.history > 0 then
							historyPos = #properties.history
						elseif historyPos > 1 then
							historyPos = historyPos - 1
						end
					elseif but == keys.down then
						if historyPos == #properties.history then historyPos = nil
							elseif historyPos ~= nil then historyPos = historyPos + 1 end
						end

						if properties.history and historyPos then
							line = properties.history[historyPos]
							pos = line:len()
						else
							line = ""
							pos = 0
						end

						redraw()
						sendLiveUpdates("history")
					elseif but == keys.backspace and pos > 0 then
						redraw(" ")
						line = line:sub(1, pos - 1) .. line:sub(pos + 1, -1)
						pos = pos - 1
						redraw()
						sendLiveUpdates("delete")
					elseif but == keys.home then
						pos = 0
						redraw()
					elseif but == keys.delete and pos < line:len() then
						redraw(" ")
						line = line:sub(1, pos) .. line:sub(pos + 2, -1)
						redraw()
						sendLiveUpdates("delete")
					elseif but == keys["end"] then
					pos = line:len()
					redraw()
				elseif properties.exitOnKey then
					if but == properties.exitOnKey or (properties.exitOnKey == "control" and
						(but == 29 or but == 157)) then
					term.setCursorBlink(false)
					return nil
				end
			end
		end

		sendLiveUpdates(e, but, x, y, p4, p5)
	end

	term.setCursorBlink(false)
	if line ~= nil then line = line:gsub("^%s*(.-)%s*$", "%1") end
	return line
end

local function Setup()
	EraseData()
	nfs.makeDir(".OSRunner/Kernels")
	nfs.makeDir(".OSRunner/Keep")
	nfs.makeDir(".OSRunner/Kernels/CraftOS")
end 

local function Sand(Dir, OSName, SetupFile, SetupURL)
	local test=loadfile(".OSRunner/APIs/osrunner")
	local sandbox=test()
	return sandbox(Dir, OSName, SetupFile, SetupURL)
end 

local function makeCustom()
	local oldPull=os.pullEvent
	os.pullEvent=os.pullEventRaw
	term.setBackgroundColor(colors.white)
	term.setTextColor(colors.gray)
	term.clear()
	term.setCursorPos(1,1)
	print("What is your OS called?")
	local cOSname=modRead({refusePrint={"\\","/","."}})
	if fs.exists(".OSRunner/OSList/"..cOSname) then printError("OS Name taken! D:") sleep(1) os.pullEvent=oldPull return false end
	print("What is the pastebin ID for the installer?")
	local pID=read()
	local url="http://pastebin.com/raw.php?i="..textutils.urlEncode(pID)
	if not http.get(url) then printError("Invalid Pastebin ID! D:") sleep(1) os.pullEvent=oldPull return false end
	print("All set! Making OS Entry...")
	local cDir=".OSRunner/Kernels/"..cOSname
	local stF="setup"
	local makeOS=fs.open(".OSRunner/OSList/"..cOSname,"w")
	makeOS.writeLine(cDir)
	makeOS.writeLine(cOSname)
	makeOS.writeLine(stF)
	makeOS.writeLine(url)
	makeOS.close()
	local makePerms=fs.open(".OSRunner/OSPerms/"..cOSname,"w")
	makePerms.write(textutils.serialize({top=false,bottom=false,front=false,back=false,left=false,right=false}))
	makePerms.close() 
	print("Made OS!")
	sleep(1)
	os.pullEvent=oldPull
	return true
end

local function managePeripherals(OS)
if debug then print("Starting peripheral management") sleep(1) end
	local OSPD=".OSRunner/OSPerms/"..OS
	if not fs.exists(OSPD) then
		local writeFirst=fs.open(OSPD,"w")
		writeFirst.write(textutils.serialize({top=false,bottom=false,front=false,back=false,left=false,right=false}))
		writeFirst.close()
	end
	local readConfig=fs.open(OSPD,"r")
	local Perms=textutils.unserialize(readConfig.readAll())
	readConfig.close()
	local currentPos=1
	local sides={rs.getSides()}
	local sideP={}
	local writeT={}
	for k,v in pairs(sides) do
		writeT[#writeT+1]=v
		if Perms[v]==nil then Perms[v]=false end
		if peripheral.getType(v)=="modem" and not peripheral.call(v,"isWireless") then
			sideP[v]=peripheral.call(v,"getNamesRemote")
			for ke,va in pairs(sideP[v]) do
				writeT[#writeT+1]=va
				if Perms[va]==nil then Perms[va]=false end
			end
		end
	end
	local function isRemote(name)
		if not peripheral.isPresent(name) then return false end
		for k,v in pairs(rs.getSides()) do
			if name==peripheral.getType(v) then return false end
		end
		for k,v in pairs(rs.getSides()) do
			if peripheral.getType(v)=="modem" and not peripheral.call(v,"isWireless") and peripheral.call(v,"isPresentRemote",name) then return v end
		end
		return nil
	end
	while true do
		local drawBox=paintutils.loadImage(".OSRunner/Resources/box")
		term.setBackgroundColor(colors.white) 
		term.clear()
		paintutils.drawImage(drawBox,1,1)
		term.setTextColor(colors.white)
		term.setBackgroundColor(colors.red)
		CenterPrint("Peripheral Management:",1)
		term.setBackgroundColor(colors.gray)
		CenterPrint(OS,2)
		local n=1
		for i=currentPos,currentPos+5 do
			term.setBackgroundColor(colors.white)
			term.setTextColor(colors.black)
			term.setCursorPos(14,3+(n*2))
			local name=writeT[i]
			local allowed=": "..Perms[name] and "allowed( " or "denied( "
			local type=(peripheral.getType(name) or "none")..")"
			centerWrite(name..allowed..type,3+(n*2))
			--CenterWrite(v..": "..((Perms[v] and "allowed") or "denied").." ("..(peripheral.getType(v) or "none")..")"..((peripheral.getType(v)=="drive" and diskMP) or ""),3+(i*2))
			if not Perms[name] then 
				term.setBackgroundColor(colors.lime) term.setTextColor(colors.white) CenterPrint("Allow Access",4+(n*2))
			else
				term.setBackgroundColor(colors.red) term.setTextColor(colors.black) CenterPrint("Deny Access", 4+(n*2))
			end
			n=n+1
		end
		n=nil
		term.setBackgroundColor(colors.lightGray)
		term.setTextColor(currentPos>1 and colors.black or colors.gray)
		term.setCursorPos(2,17)
		write("Back")
		term.setTextColor(currentPos+6<#writeT and colors.black or colors.gray)
		term.setCursorPos(47,17)
		write("Next")
		term.setCursorPos(5,18)
		term.setTextColor(colors.black)
		write("Apply")
		term.setCursorPos(42,18)
		write("Exit")
		while true do
			local e,b,xPos,yPos=os.pullEventRaw()
			if e=="mouse_click" then
				if (yPos==6) then
					Perms[currentPos] = not Perms[currentPos]
					break
				elseif yPos==8 then
					Perms[currentPos+1]= not Perms[currentPos+1]
					break
				elseif yPos==10 then
					Perms[currentPos+2]= not Perms[currentPos+2]
					break
				elseif yPos==12 then
					Perms[currentPos+3]= not Perms[currentPos+3]
					break
				elseif yPos==14 then
					Perms[currentPos+4]= not Perms[currentPos+4]
					break
				elseif yPos==16 then
					Perms[currentPos+5]= not Perms[currentPos+5]
					break
				elseif yPos==17 and xPos >= 2 and xPos <= 5 and currentPos>1 then
					currentPos=currentPos-1
					break
				elseif yPos==17 and xPos >=47 and xPos <=50 and currentPos+5<=#writeT then
					currentPos=currentPos+1
					break
				elseif (xPos>=5 and xPos<=10 and yPos==18) then
					local writeConfig=fs.open(OSPD,"w")
					writeConfig.write(textutils.serialize(Perms))
					writeConfig.close()
					local readConfig=fs.open(OSPD,"r")
					local Perms=textutils.unserialize(readConfig.readAll())
					readConfig.close()
					term.setTextColor(colors.black)
					term.setBackgroundColor(colors.white)
					CenterPrint("Applied changes.",3)
					sleep(1)
					break
				elseif (xPos>=42 and xPos<=46 and yPos==18) then
					return
				end
			elseif e=="peripheral" or e=="peripheral_detach" or e=="disk" or e=="disk_eject" then
				local sides={rs.getSides()}
				local sideP={}
				local writeT={}
				for k,v in pairs(sides) do
					writeT[#writeT+1]=v
					if Perms[v]==nil then Perms[v]=false end
					if peripheral.getType(v)=="modem" and not peripheral.call(v,"isWireless") then
						sideP[v]=peripheral.call(v,"getNamesRemote")
						for ke,va in pairs(sideP[v]) do
							writeT[#writeT+1]=va
							if Perms[va]==nil then Perms[va]=false end
						end
					end
				end
				if currentPos+5>#writeT then currentPos=#writeT-5 end
				break
			end
		end
	end
end


if not fs.exists(".OSRunner/osConfig") then local makeConf=fs.open(".OSRunner/osConfig","w") makeConf.writeLine(os.version()) makeConf.close() end

term.setBackgroundColor(colors.lime)
term.clear()
paintutils.drawImage(StartScreen, 8, 4)

term.setCursorPos(1, H-1)
term.setBackgroundColor(colors.lime)
term.setTextColor(colors.gray)
local handle = fs.open("/.OSRunner/osConfig","r")
defaultOS = handle.readLine()
handle.close()
CenterPrint("Running Default OS: "..defaultOS,H-1)
CenterWrite("Press F5 or click for OSRunner Menu",H)




local function CheckFiles()

end 

local function StartLoader()
	if debug then print("Starting loader") sleep(1) end
	local currentOS=1
	local OSList=nfs.list(".OSRunner/OSList/")
	table.sort(OSList)
	local handle = fs.open("/.OSRunner/osConfig","r")
	local defaultOS = handle.readLine()
	handle.close()
	while true do
		local handle = fs.open("/.OSRunner/osConfig","r")
		defaultOS = handle.readLine()
		handle.close()
		local Main = paintutils.loadImage(".OSRunner/Resources/main")
		term.setBackgroundColor(colors.white)
		term.clear()
		paintutils.drawImage(Main, 1, 1)
		term.setBackgroundColor(colors.red)
		term.setTextColor(colors.white)
		CenterPrint("OSRunner Options", 1)
		term.setBackgroundColor(colors.lightGray)
		term.setTextColor(colors.black)
		term.setCursorPos(4, 12)
		if currentOS==1 then term.setTextColor(colors.gray) end
		write("Back")
		if currentOS==1 then term.setTextColor(colors.black) end
		term.setCursorPos(45, 12)
		if currentOS==#OSList then term.setTextColor(colors.gray) end
		write("Next")
		if currentOS==#OSList then term.setTextColor(colors.black) end
		term.setCursorPos(4, 15)
		if not fs.exists(".OSRunner/Kernels/"..OSList[currentOS]) then term.setTextColor(colors.gray) end
		write("Delete OS")
		if not fs.exists(".OSRunner/Kernels/"..OSList[currentOS]) then term.setTextColor(colors.black) end
		term.setCursorPos(2, 17)
		write("System Settings")
		term.setCursorPos(22, 16)
		write("Launch OS")
		term.setCursorPos(40,15)
		if currentOS==1 then term.setTextColor(colors.gray) end
		write("First")
		if currentOS==1 then term.setTextColor(colors.black) end
		term.setCursorPos(40,17)
		if currentOS==#OSList then term.setTextColor(colors.gray) end
		write("Last")
		if currentOS==#OSList then term.setTextColor(colors.black) end
		term.setBackgroundColor(colors.lightGray)
		term.setCursorPos(2, 3)
		term.write(string.rep(" ", W - 2))
		local v=OSList[currentOS]
		CenterPrint(v, 3)
		term.setCursorPos(2,19)
		term.setBackgroundColor(colors.gray)
		term.setTextColor(colors.white)
		CenterWrite("Default OS: "..defaultOS,H)
		local event,btw,x,y=os.pullEventRaw("mouse_click")
		if event=="mouse_click" then
			if x >= 4 and x <= 7 and y==12 and currentOS > 1 then
				currentOS=currentOS-1
			elseif x >= 45 and x <= 48 and y==12 and currentOS < #OSList then
				currentOS=currentOS+1
			elseif x >= 4 and x <= 12 and y==15 and fs.exists(".OSRunner/Kernels/"..OSList[currentOS]) then
				fs.delete(".OSRunner/Kernels/"..OSList[currentOS])
				term.setTextColor(colors.black)
				CenterPrint("Deleted "..OSList[currentOS],5)
				sleep(1)
			elseif x >= 2 and x <= 17 and y==17 then
				while true do
					term.clear()
					local gui = paintutils.loadImage("/.OSRunner/Resources/setscreen")
					paintutils.drawImage(gui,1,1)
					term.setBackgroundColor(colors.red)
					term.setTextColor(colors.white)
					CenterPrint("System Settings",1)
					term.setBackgroundColor(colors.lightGray)
					term.setTextColor(colors.black)
					CenterPrint(OSList[currentOS],3)
					term.setCursorPos(3,5)
					local handle = fs.open("/.OSRunner/osConfig","r")
					defaultOS = handle.readLine()
					handle.close()
					if defaultOS == OSList[currentOS] then
						term.setBackgroundColor(colors.lime)
					else
						term.setBackgroundColor(colors.red)
					end
					term.write("Default OS")
					term.setCursorPos(30,5)
					term.setBackgroundColor(colors.lime)
					term.write("Manage Peripherals")
					term.setBackgroundColor(colors.lightGray)
					term.setTextColor(colors.black)
					term.setCursorPos(4, 12)
					if currentOS==1 then term.setTextColor(colors.gray) end
					write("Back")
					if currentOS==1 then term.setTextColor(colors.black) end
					term.setCursorPos(45, 12)
					if currentOS==#OSList then term.setTextColor(colors.gray) end
					write("Next")
					if currentOS==#OSList then term.setTextColor(colors.black) end
					term.setCursorPos(2,15)
					write("   Custom OS   ")
					term.setCursorPos(35,15)
					write("  Main Screen  ")
					term.setCursorPos(14,17)
					write("  Reinstall OSRunner  ")
					local handle = fs.open("/.OSRunner/osConfig","r")
					defaultOS = handle.readLine()
					handle.close()
					local _,p1,xPos,yPos = os.pullEventRaw("mouse_click")
					if event=="mouse_click" and p1 == 1 then
						if (xPos >=3 and xPos <=12 and yPos == 5) then
							if defaultOS == OSList[currentOS] then
								term.setCursorPos(3,5)
								term.setBackgroundColor(colors.red)
								term.write("Default OS")
								local handle = fs.open("/.OSRunner/osConfig","w")
								handle.write(os.version())
								handle.close()
							elseif defaultOS ~= OSList[currentOS] then
								term.setCursorPos(3,5)
								term.setBackgroundColor(colors.lime)
								term.write("Default OS")
								local handle = fs.open("/.OSRunner/osConfig","w")
								handle.writeLine(OSList[currentOS])
								handle.close()
							end
						elseif (xPos >= 2 and xPos <=8 and yPos == 12) and OSList[currentOS-1] ~= nil then
							currentOS = (currentOS-1)
						elseif (xPos >= 43 and xPos <= 50 and yPos ==12) and #OSList >= currentOS+1 then
							currentOS = (currentOS+1)
						elseif (xPos >=35 and xPos <=50 and yPos ==15) then
							return StartLoader()
						elseif (xPos >= 30 and xPos <= 48 and yPos == 5) then
							managePeripherals(OSList[currentOS])
						elseif (xPos >= 5 and xPos <= 13 and yPos == 15) then
							makeCustom()
							local OSList=nfs.list(".OSRunner/OSList/")
							table.sort(OSList)
						elseif (xPos >= 14 and xPos <= 36 and yPos==17) then
							term.setBackgroundColor(colors.white)
							term.clear()
							term.setCursorPos(1,1)
							local ynM=paintutils.loadImage(".OSRunner/Resources/box")
							paintutils.drawImage(ynM, 1, 1)
							term.setBackgroundColor(colors.white)
							CenterPrint("Are you sure you want to reinstall OSRunner?",5)
							CenterPrint("All OS'es will be kept.",7)
							term.setBackgroundColor(colors.lime)
							term.setCursorPos(7,11)
							write(" Yes ")
							term.setBackgroundColor(colors.red)
							term.setCursorPos(40,11)
							write(" No ")
							while true do
								local e,btn,x,y=os.pullEventRaw("mouse_click")
								if (x>=7 and x<=12 and y==11) then
									term.setBackgroundColor(colors.white)
									CenterPrint("Reinstalling...",12)
									fs.delete(".tempOS")
									fs.delete(".tempKN")
									fs.delete(".tempPM")
									fs.makeDir(".tempOS")
									fs.makeDir(".tempKN")
									fs.makeDir(".tempPM")
									for k,v in pairs(fs.list(".OSRunner/OSList")) do
										fs.copy(".OSRunner/OSList/"..v, ".tempOS/"..v)
									end
									os.queueEvent("") coroutine.yield()
									for k,v in pairs(fs.list(".OSRunner/Kernels")) do
										fs.copy(".OSRunner/Kernels/"..v, ".tempKN/"..v)
									end
									os.queueEvent("") coroutine.yield()
									for k,v in pairs(fs.list(".OSRunner/OSPerms")) do
										fs.copy(".OSRunner/OSPerms/"..v,".tempPM/"..v)
									end
									os.queueEvent("") coroutine.yield()
									local cake=http.get("https://raw.github.com/MudkipTheEpic/ComputerCraft/beta/installer").readAll()
									os.queueEvent("") coroutine.yield()
									pcall(setfenv(loadstring(cake),getfenv()))
									os.queueEvent("") coroutine.yield()
									for k,v in pairs(fs.list(".tempOS")) do
										if not fs.exists(".OSRunner/OSList/"..v) then fs.copy(".tempOS/"..v,".OSRunner/OSList/"..v) end
									end
									os.queueEvent("") coroutine.yield()
									for k,v in pairs(fs.list(".tempKN")) do
										fs.delete(".OSRunner/Kernels/"..v) fs.copy(".tempKN/"..v,".OSRunner/Kernels/"..v)
									end
									os.queueEvent("") coroutine.yield()
									for k,v in pairs(fs.list(".tempPM")) do
										fs.delete(".OSRunner/OSPerms/"..v) pcall(fs.copy,".tempPM"..v,".OSRunner/OSPerms/"..v)
									end
									os.queueEvent("") coroutine.yield()
									fs.delete(".tempOS")
									fs.delete(".tempKN")
									fs.delete(".tempPM")
									os.reboot()
								elseif (x>=40 and x<=44 and y==11) then 
									return StartLoader()
								end
							end
						end	
					end
				end
			elseif x >= 22 and x <= 30 and y==16 then
				local readConf=fs.open(".OSRunner/OSList/"..OSList[currentOS],"r")
				local dir=readConf.readLine()
				local OSName=readConf.readLine()
				local setupFile=readConf.readLine()
				local setupURL=readConf.readLine()
				readConf.close()
				if not fs.exists(".OSRunner/Kernels/"..OSList[currentOS]) then
					Sand(dir,OSName,setupFile,setupURL)
				else
					Sand(dir,OSName)
				end
				break
			elseif x >= 40 and x <= 44 and y==15 and currentOS > 1 then
				currentOS=1
			elseif x >= 40 and x <= 43 and y==17 and currentOS < #OSList then
				currentOS=#OSList
			end
		end
	end 
end

local function RunDef()
	term.setBackgroundColor(colors.lime)
	term.clear()
	local handle = fs.open("/.OSRunner/osConfig","r")
	defaultOS = handle.readLine()
	handle.close()
	if fs.exists(".OSRunner/Kernels/"..defaultOS) or defaultOS==os.version() then
		Sand(".OSRunner/Kernels/"..defaultOS, defaultOS)
	else
		local readConf=fs.open(".OSRunner/OSList/"..defaultOS,"r")
		local dir=readConf.readLine()
		local OSName=readConf.readLine()
		local setupFile=readConf.readLine()
		local setupURL=readConf.readLine()
		readConf.close()
		Sand(dir,OSName,setupFile,setupURL)
	end 
end

os.startTimer(3)
if debug then print("Starting setup") sleep(1) end
while true do
	local event, p1, p2 = os.pullEventRaw()
	if event == "key" and p1 == 63 or event=="mouse_click" then
		StartLoader()
		break
	elseif event == "timer" then
		RunDef()
		break
	end 
end
